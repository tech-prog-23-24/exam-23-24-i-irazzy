#include "mytcpserver.h"
#include <QDebug>

MyTcpServer::MyTcpServer(QObject* parent) : QObject(parent)
{
    server = new QTcpServer(this);
    connect(server, &QTcpServer::newConnection, this, &MyTcpServer::onNewConnection);

    if (!server->listen(QHostAddress::Any, 33333)) {
        qDebug() << "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä";
    } else {
        qDebug() << "‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 33333";
    }
}

MyTcpServer::~MyTcpServer()
{
    for (auto client : buffers.keys()) {
        client->disconnectFromHost();
        client->deleteLater();
    }
    server->close();
}

void MyTcpServer::onNewConnection()
{
    QTcpSocket* client = server->nextPendingConnection();
    buffers[client] = QByteArray();

    qDebug() << "üîå –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:" << client;

    client->write("Welcome!\n");
    client->write(QString("–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: %1\n").arg(buffers.size()).toUtf8());

    connect(client, &QTcpSocket::readyRead, this, &MyTcpServer::onReadyRead);
    connect(client, &QTcpSocket::disconnected, this, &MyTcpServer::onClientDisconnected);
}

void MyTcpServer::onClientDisconnected()
{
    QTcpSocket* client = qobject_cast<QTcpSocket*>(sender());
    if (!client) return;

    qDebug() << "‚ùé –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è:" << client;

    buffers.remove(client);
    finishedClients.remove(client);
    client->deleteLater();
}

void MyTcpServer::onReadyRead()
{
    QTcpSocket* client = qobject_cast<QTcpSocket*>(sender());
    if (!client) return;

    qDebug() << "üì• –î–∞–Ω–Ω—ã–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:" << client;

    QByteArray& buffer = buffers[client];
    buffer.append(client->readAll());

    while (buffer.contains('\n')) {
        int idx = buffer.indexOf('\n');
        QByteArray line = buffer.left(idx).trimmed();
        buffer.remove(0, idx + 1);

        QString command = QString::fromUtf8(line);
        qDebug() << "üì¶ –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞:" << command;

        processCommand(client, command);
    }
}

void MyTcpServer::processCommand(QTcpSocket* client, const QString& command)
{
    if (command.startsWith("/add ")) {
        QString item = command.mid(5).trimmed();
        sharedList.append(item);
        client->write("–î–æ–±–∞–≤–ª–µ–Ω–æ: " + item.toUtf8() + "\n");

    } else if (command.startsWith("/remove ")) {
        QString item = command.mid(8).trimmed();
        if (sharedList.removeAll(item))
            client->write("–£–¥–∞–ª–µ–Ω–æ: " + item.toUtf8() + "\n");
        else
            client->write("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω\n");

    } else if (command == "/finish") {
        finishedClients.insert(client);
        client->write("–û–∂–∏–¥–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n");

        if (finishedClients.size() == buffers.size()) {
            QString result = "–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫:\n";
            for (const QString& item : sharedList)
                result += "- " + item + "\n";

            broadcast(result.toUtf8());
            sharedList.clear();
            finishedClients.clear();
        }

    } else {
        client->write("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /add, /remove –∏–ª–∏ /finish\n");
    }
}

void MyTcpServer::broadcast(const QByteArray& message)
{
    for (QTcpSocket* client : buffers.keys()) {
        client->write(message);
    }
}
